/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * ts api
 * ts api
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {

    constructor(protected configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface DataSet
 */
export interface DataSet {
    /**
     * 
     * @type {number}
     * @memberof DataSet
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof DataSet
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof DataSet
     */
    uidFrom?: string;
    /**
     * 
     * @type {string}
     * @memberof DataSet
     */
    uidTo?: string;
    /**
     * 
     * @type {number}
     * @memberof DataSet
     */
    count?: number;
}
/**
 * 
 * @export
 * @interface DataSetResponse
 */
export interface DataSetResponse {
    /**
     * 
     * @type {Array<DataSet>}
     * @memberof DataSetResponse
     */
    data?: Array<DataSet>;
    /**
     * 
     * @type {string}
     * @memberof DataSetResponse
     */
    queryString?: string;
}
/**
 * 
 * @export
 * @interface MarketBreakPoint
 */
export interface MarketBreakPoint {
    /**
     * 
     * @type {string}
     * @memberof MarketBreakPoint
     */
    timestamp?: string;
}
/**
 * 
 * @export
 * @interface MarketBreakPointResponse
 */
export interface MarketBreakPointResponse {
    /**
     * 
     * @type {Array<MarketBreakPoint>}
     * @memberof MarketBreakPointResponse
     */
    data?: Array<MarketBreakPoint>;
    /**
     * 
     * @type {string}
     * @memberof MarketBreakPointResponse
     */
    queryString?: string;
}
/**
 * 
 * @export
 * @interface Model
 */
export interface Model {
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    model?: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    params?: string;
}
/**
 * 
 * @export
 * @interface RawData
 */
export interface RawData {
    /**
     * 
     * @type {number}
     * @memberof RawData
     */
    timestamp?: number;
    /**
     * 
     * @type {number}
     * @memberof RawData
     */
    open?: number;
    /**
     * 
     * @type {number}
     * @memberof RawData
     */
    high?: number;
    /**
     * 
     * @type {number}
     * @memberof RawData
     */
    low?: number;
    /**
     * 
     * @type {number}
     * @memberof RawData
     */
    close?: number;
    /**
     * 
     * @type {number}
     * @memberof RawData
     */
    volume?: number;
}
/**
 * 
 * @export
 * @interface RawDataResponse
 */
export interface RawDataResponse {
    /**
     * 
     * @type {Array<RawData>}
     * @memberof RawDataResponse
     */
    data?: Array<RawData>;
    /**
     * 
     * @type {string}
     * @memberof RawDataResponse
     */
    queryString?: string;
}
/**
 * 
 * @export
 * @interface SampleSummaryRequest
 */
export interface SampleSummaryRequest extends Array<SampleSummaryRequestItem> {
}
/**
 * 
 * @export
 * @interface SampleSummaryRequestItem
 */
export interface SampleSummaryRequestItem {
    /**
     * 
     * @type {string}
     * @memberof SampleSummaryRequestItem
     */
    from?: string;
    /**
     * 
     * @type {string}
     * @memberof SampleSummaryRequestItem
     */
    to?: string;
}
/**
 * 
 * @export
 * @interface SampleSummaryResponse
 */
export interface SampleSummaryResponse extends Array<SampleSummaryResponseItem> {
}
/**
 * 
 * @export
 * @interface SampleSummaryResponseItem
 */
export interface SampleSummaryResponseItem {
    /**
     * 
     * @type {string}
     * @memberof SampleSummaryResponseItem
     */
    from?: string;
    /**
     * 
     * @type {string}
     * @memberof SampleSummaryResponseItem
     */
    to?: string;
    /**
     * 
     * @type {number}
     * @memberof SampleSummaryResponseItem
     */
    count?: number;
}
/**
 * 
 * @export
 * @interface SampleTypes
 */
export interface SampleTypes {
    /**
     * 
     * @type {string}
     * @memberof SampleTypes
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof SampleTypes
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface Samples
 */
export interface Samples {
    /**
     * 
     * @type {string}
     * @memberof Samples
     */
    uid?: string;
    /**
     * 
     * @type {Array<RawData>}
     * @memberof Samples
     */
    sampleData?: Array<RawData>;
    /**
     * 
     * @type {number}
     * @memberof Samples
     */
    value?: number;
    /**
     * 
     * @type {Array<RawData>}
     * @memberof Samples
     */
    extraData?: Array<RawData>;
}
/**
 * 
 * @export
 * @interface SamplesRequest
 */
export interface SamplesRequest extends Array<Samples> {
}
/**
 * 
 * @export
 * @interface SamplesResponse
 */
export interface SamplesResponse {
    /**
     * 
     * @type {Array<Samples>}
     * @memberof SamplesResponse
     */
    data?: Array<Samples>;
    /**
     * 
     * @type {string}
     * @memberof SamplesResponse
     */
    queryString?: string;
}
/**
 * ModelApi - fetch parameter creator
 * @export
 */
export const ModelApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * get Model list
         * @summary get Model list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModels(options: any = {}): FetchArgs {
            const localVarPath = `/models`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get sample type list
         * @summary get sample type list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSampleTypes(options: any = {}): FetchArgs {
            const localVarPath = `/sample_types`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * add or update Model
         * @summary add or update Model
         * @param {Model} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setModel(body: Model, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling setModel.');
            }
            const localVarPath = `/models`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = '*/*';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Model" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModelApi - functional programming interface
 * @export
 */
export const ModelApiFp = function(configuration?: Configuration) {
    return {
        /**
         * get Model list
         * @summary get Model list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModels(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Model> {
            const localVarFetchArgs = ModelApiFetchParamCreator(configuration).getModels(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * get sample type list
         * @summary get sample type list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSampleTypes(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SampleTypes> {
            const localVarFetchArgs = ModelApiFetchParamCreator(configuration).getSampleTypes(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * add or update Model
         * @summary add or update Model
         * @param {Model} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setModel(body: Model, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ModelApiFetchParamCreator(configuration).setModel(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ModelApi - factory interface
 * @export
 */
export const ModelApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * get Model list
         * @summary get Model list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModels(options?: any) {
            return ModelApiFp(configuration).getModels(options)(fetch, basePath);
        },
        /**
         * get sample type list
         * @summary get sample type list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSampleTypes(options?: any) {
            return ModelApiFp(configuration).getSampleTypes(options)(fetch, basePath);
        },
        /**
         * add or update Model
         * @summary add or update Model
         * @param {Model} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setModel(body: Model, options?: any) {
            return ModelApiFp(configuration).setModel(body, options)(fetch, basePath);
        },
    };
};

/**
 * ModelApi - object-oriented interface
 * @export
 * @class ModelApi
 * @extends {BaseAPI}
 */
export class ModelApi extends BaseAPI {
    /**
     * get Model list
     * @summary get Model list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelApi
     */
    public getModels(options?: any) {
        return ModelApiFp(this.configuration).getModels(options)(this.fetch, this.basePath);
    }

    /**
     * get sample type list
     * @summary get sample type list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelApi
     */
    public getSampleTypes(options?: any) {
        return ModelApiFp(this.configuration).getSampleTypes(options)(this.fetch, this.basePath);
    }

    /**
     * add or update Model
     * @summary add or update Model
     * @param {Model} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelApi
     */
    public setModel(body: Model, options?: any) {
        return ModelApiFp(this.configuration).setModel(body, options)(this.fetch, this.basePath);
    }

}
/**
 * RawDataApi - fetch parameter creator
 * @export
 */
export const RawDataApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * get Market Break Points
         * @summary get Market Break Points
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketBreakPoint(options: any = {}): FetchArgs {
            const localVarPath = `/market_break_points`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get RawData
         * @summary get RawData
         * @param {string} interval 
         * @param {number} start 
         * @param {number} end 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRawData(interval: string, start: number, end: number, options: any = {}): FetchArgs {
            // verify required parameter 'interval' is not null or undefined
            if (interval === null || interval === undefined) {
                throw new RequiredError('interval','Required parameter interval was null or undefined when calling getRawData.');
            }
            // verify required parameter 'start' is not null or undefined
            if (start === null || start === undefined) {
                throw new RequiredError('start','Required parameter start was null or undefined when calling getRawData.');
            }
            // verify required parameter 'end' is not null or undefined
            if (end === null || end === undefined) {
                throw new RequiredError('end','Required parameter end was null or undefined when calling getRawData.');
            }
            const localVarPath = `/raw`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RawDataApi - functional programming interface
 * @export
 */
export const RawDataApiFp = function(configuration?: Configuration) {
    return {
        /**
         * get Market Break Points
         * @summary get Market Break Points
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketBreakPoint(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MarketBreakPointResponse> {
            const localVarFetchArgs = RawDataApiFetchParamCreator(configuration).getMarketBreakPoint(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * get RawData
         * @summary get RawData
         * @param {string} interval 
         * @param {number} start 
         * @param {number} end 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRawData(interval: string, start: number, end: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RawDataResponse> {
            const localVarFetchArgs = RawDataApiFetchParamCreator(configuration).getRawData(interval, start, end, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * RawDataApi - factory interface
 * @export
 */
export const RawDataApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * get Market Break Points
         * @summary get Market Break Points
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketBreakPoint(options?: any) {
            return RawDataApiFp(configuration).getMarketBreakPoint(options)(fetch, basePath);
        },
        /**
         * get RawData
         * @summary get RawData
         * @param {string} interval 
         * @param {number} start 
         * @param {number} end 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRawData(interval: string, start: number, end: number, options?: any) {
            return RawDataApiFp(configuration).getRawData(interval, start, end, options)(fetch, basePath);
        },
    };
};

/**
 * RawDataApi - object-oriented interface
 * @export
 * @class RawDataApi
 * @extends {BaseAPI}
 */
export class RawDataApi extends BaseAPI {
    /**
     * get Market Break Points
     * @summary get Market Break Points
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RawDataApi
     */
    public getMarketBreakPoint(options?: any) {
        return RawDataApiFp(this.configuration).getMarketBreakPoint(options)(this.fetch, this.basePath);
    }

    /**
     * get RawData
     * @summary get RawData
     * @param {string} interval 
     * @param {number} start 
     * @param {number} end 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RawDataApi
     */
    public getRawData(interval: string, start: number, end: number, options?: any) {
        return RawDataApiFp(this.configuration).getRawData(interval, start, end, options)(this.fetch, this.basePath);
    }

}
/**
 * SampleApi - fetch parameter creator
 * @export
 */
export const SampleApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * get data set
         * @summary get data set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSets(options: any = {}): FetchArgs {
            const localVarPath = `/dataset`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get Sample Summary
         * @summary get Sample Summary
         * @param {Array<SampleSummaryRequestItem>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSampleSummary(body: Array<SampleSummaryRequestItem>, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling getSampleSummary.');
            }
            const localVarPath = `/samples/summary`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Array&lt;SampleSummaryRequestItem&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get Sample list
         * @summary get Sample list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSamples(options: any = {}): FetchArgs {
            const localVarPath = `/samples`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * add or update data set
         * @summary add or update data set
         * @param {DataSet} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDataSet(body: DataSet, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling setDataSet.');
            }
            const localVarPath = `/dataset`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"DataSet" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * add or update sample
         * @summary add or update sample
         * @param {Array<Samples>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSamples(body: Array<Samples>, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling setSamples.');
            }
            const localVarPath = `/samples`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Array&lt;Samples&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SampleApi - functional programming interface
 * @export
 */
export const SampleApiFp = function(configuration?: Configuration) {
    return {
        /**
         * get data set
         * @summary get data set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSets(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DataSetResponse> {
            const localVarFetchArgs = SampleApiFetchParamCreator(configuration).getDataSets(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * get Sample Summary
         * @summary get Sample Summary
         * @param {Array<SampleSummaryRequestItem>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSampleSummary(body: Array<SampleSummaryRequestItem>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SampleSummaryResponse> {
            const localVarFetchArgs = SampleApiFetchParamCreator(configuration).getSampleSummary(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * get Sample list
         * @summary get Sample list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSamples(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SamplesResponse> {
            const localVarFetchArgs = SampleApiFetchParamCreator(configuration).getSamples(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * add or update data set
         * @summary add or update data set
         * @param {DataSet} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDataSet(body: DataSet, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SampleApiFetchParamCreator(configuration).setDataSet(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * add or update sample
         * @summary add or update sample
         * @param {Array<Samples>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSamples(body: Array<Samples>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SampleApiFetchParamCreator(configuration).setSamples(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SampleApi - factory interface
 * @export
 */
export const SampleApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * get data set
         * @summary get data set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSets(options?: any) {
            return SampleApiFp(configuration).getDataSets(options)(fetch, basePath);
        },
        /**
         * get Sample Summary
         * @summary get Sample Summary
         * @param {Array<SampleSummaryRequestItem>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSampleSummary(body: Array<SampleSummaryRequestItem>, options?: any) {
            return SampleApiFp(configuration).getSampleSummary(body, options)(fetch, basePath);
        },
        /**
         * get Sample list
         * @summary get Sample list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSamples(options?: any) {
            return SampleApiFp(configuration).getSamples(options)(fetch, basePath);
        },
        /**
         * add or update data set
         * @summary add or update data set
         * @param {DataSet} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDataSet(body: DataSet, options?: any) {
            return SampleApiFp(configuration).setDataSet(body, options)(fetch, basePath);
        },
        /**
         * add or update sample
         * @summary add or update sample
         * @param {Array<Samples>} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSamples(body: Array<Samples>, options?: any) {
            return SampleApiFp(configuration).setSamples(body, options)(fetch, basePath);
        },
    };
};

/**
 * SampleApi - object-oriented interface
 * @export
 * @class SampleApi
 * @extends {BaseAPI}
 */
export class SampleApi extends BaseAPI {
    /**
     * get data set
     * @summary get data set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleApi
     */
    public getDataSets(options?: any) {
        return SampleApiFp(this.configuration).getDataSets(options)(this.fetch, this.basePath);
    }

    /**
     * get Sample Summary
     * @summary get Sample Summary
     * @param {Array<SampleSummaryRequestItem>} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleApi
     */
    public getSampleSummary(body: Array<SampleSummaryRequestItem>, options?: any) {
        return SampleApiFp(this.configuration).getSampleSummary(body, options)(this.fetch, this.basePath);
    }

    /**
     * get Sample list
     * @summary get Sample list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleApi
     */
    public getSamples(options?: any) {
        return SampleApiFp(this.configuration).getSamples(options)(this.fetch, this.basePath);
    }

    /**
     * add or update data set
     * @summary add or update data set
     * @param {DataSet} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleApi
     */
    public setDataSet(body: DataSet, options?: any) {
        return SampleApiFp(this.configuration).setDataSet(body, options)(this.fetch, this.basePath);
    }

    /**
     * add or update sample
     * @summary add or update sample
     * @param {Array<Samples>} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleApi
     */
    public setSamples(body: Array<Samples>, options?: any) {
        return SampleApiFp(this.configuration).setSamples(body, options)(this.fetch, this.basePath);
    }

}
