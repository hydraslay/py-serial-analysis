# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.raw_data import RawData  # noqa: F401,E501
from swagger_server import util


class Samples(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: float=None, _from: float=None, to: float=None, sample_data: List[RawData]=None, value: float=None):  # noqa: E501
        """Samples - a model defined in Swagger

        :param id: The id of this Samples.  # noqa: E501
        :type id: float
        :param _from: The _from of this Samples.  # noqa: E501
        :type _from: float
        :param to: The to of this Samples.  # noqa: E501
        :type to: float
        :param sample_data: The sample_data of this Samples.  # noqa: E501
        :type sample_data: List[RawData]
        :param value: The value of this Samples.  # noqa: E501
        :type value: float
        """
        self.swagger_types = {
            'id': float,
            '_from': float,
            'to': float,
            'sample_data': List[RawData],
            'value': float
        }

        self.attribute_map = {
            'id': 'id',
            '_from': 'from',
            'to': 'to',
            'sample_data': 'sample_data',
            'value': 'value'
        }
        self._id = id
        self.__from = _from
        self._to = to
        self._sample_data = sample_data
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'Samples':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Samples of this Samples.  # noqa: E501
        :rtype: Samples
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> float:
        """Gets the id of this Samples.


        :return: The id of this Samples.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id: float):
        """Sets the id of this Samples.


        :param id: The id of this Samples.
        :type id: float
        """

        self._id = id

    @property
    def _from(self) -> float:
        """Gets the _from of this Samples.


        :return: The _from of this Samples.
        :rtype: float
        """
        return self.__from

    @_from.setter
    def _from(self, _from: float):
        """Sets the _from of this Samples.


        :param _from: The _from of this Samples.
        :type _from: float
        """

        self.__from = _from

    @property
    def to(self) -> float:
        """Gets the to of this Samples.


        :return: The to of this Samples.
        :rtype: float
        """
        return self._to

    @to.setter
    def to(self, to: float):
        """Sets the to of this Samples.


        :param to: The to of this Samples.
        :type to: float
        """

        self._to = to

    @property
    def sample_data(self) -> List[RawData]:
        """Gets the sample_data of this Samples.


        :return: The sample_data of this Samples.
        :rtype: List[RawData]
        """
        return self._sample_data

    @sample_data.setter
    def sample_data(self, sample_data: List[RawData]):
        """Sets the sample_data of this Samples.


        :param sample_data: The sample_data of this Samples.
        :type sample_data: List[RawData]
        """

        self._sample_data = sample_data

    @property
    def value(self) -> float:
        """Gets the value of this Samples.


        :return: The value of this Samples.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value: float):
        """Sets the value of this Samples.


        :param value: The value of this Samples.
        :type value: float
        """

        self._value = value
