# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class FitRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, model: str=None, data_set: float=None):  # noqa: E501
        """FitRequest - a model defined in Swagger

        :param model: The model of this FitRequest.  # noqa: E501
        :type model: str
        :param data_set: The data_set of this FitRequest.  # noqa: E501
        :type data_set: float
        """
        self.swagger_types = {
            'model': str,
            'data_set': float
        }

        self.attribute_map = {
            'model': 'model',
            'data_set': 'dataSet'
        }
        self._model = model
        self._data_set = data_set

    @classmethod
    def from_dict(cls, dikt) -> 'FitRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FitRequest of this FitRequest.  # noqa: E501
        :rtype: FitRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model(self) -> str:
        """Gets the model of this FitRequest.

        specific the model number  # noqa: E501

        :return: The model of this FitRequest.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this FitRequest.

        specific the model number  # noqa: E501

        :param model: The model of this FitRequest.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def data_set(self) -> float:
        """Gets the data_set of this FitRequest.


        :return: The data_set of this FitRequest.
        :rtype: float
        """
        return self._data_set

    @data_set.setter
    def data_set(self, data_set: float):
        """Sets the data_set of this FitRequest.


        :param data_set: The data_set of this FitRequest.
        :type data_set: float
        """
        if data_set is None:
            raise ValueError("Invalid value for `data_set`, must not be `None`")  # noqa: E501

        self._data_set = data_set
